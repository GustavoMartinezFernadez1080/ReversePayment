package com.bbva.kmic.lib.r092.impl;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.sql.Date;
import Constants.Constants;
import Utils.MappingMeth;
import com.bbva.apx.exception.db.DBException;
import com.bbva.kmic.dto.commonmodel.Account;
import com.bbva.kmic.dto.commonmodel.Amount;
import com.bbva.kmic.dto.commonmodel.AccountEvent;
import com.bbva.kmic.dto.movementmodel.MicroloanMovement;
import com.bbva.kmic.dto.payments.*;


/**
 * The KMICR092Impl class...
 */
public class KMICR092Impl extends KMICR092Abstract {

	private static final Logger LOGGER = LoggerFactory.getLogger(KMICR092Impl.class);

	MappingMeth mapper = new MappingMeth();

	/**
	 * The execute method...
	 */
	@Override
	public void executeGetReversePayments(List<ProductInputDTO> items) {
	    for (ProductInputDTO dto : items) {
	        LOGGER.info("[KMICR92] Línea leída y mapeada en librería: {}", dto.toString());
 
	        MicroloanMovement map = executeMapingMicroloanMovement ( dto );
	        // Llama ahora que ya está poblado
	        MicroloanMovement out = kmicR060.executeGetMicroloanMovement(map);

	        // Puedes loggear la salida si quieres validar
	        if (out != null) {
	            // Se encontró un registro
	            LOGGER.info("Se encontró un registro: {}", out);
	            //Map<String, Object> args = executeBuildUserParams(map);
	            //executeUpdateMicrocreditContract (args) ;
	            //executeUpdateDspnAmort(args);
	            //executeUpdateAmortizationContition(args);
	        } else {
	            // No se encontró ningún registro
	            LOGGER.info("No se encontró ningún registro.");
	        }
	    }
	}



	

	
	
	private static Map<String, Object> executeBuildUserParams(MicroloanMovement bean){
	     Map<String, Object> map = new HashMap<>();
	    LOGGER.debug("Inicio de mapeo: {}");
	    map.put("contractId", bean.getContractId());
	    
	    LOGGER.debug("contractId: {}", bean.getContractId());
	    map.put("microloanId", bean.getMicroloanId());
	    map.put("date", new Date(bean.getInstallmentDate().getTime()));
	    if (bean.getAmount() != null) {
	        map.put("amount", bean.getAmount().getAmount());
	    }
	    if (bean.getAccount() != null && bean.getAccount().getEvent() != null) {
	        map.put("eventCode", bean.getAccount().getEvent().getCode());
	    }
	    LOGGER.debug("Parámetros construidos: {}", map);
	    return map;
	}

	private MicroloanMovement executeMapingMicroloanMovement (ProductInputDTO dto ) {
		MicroloanMovement movimiento = new MicroloanMovement();
		// Set campos directos
        movimiento.setContractId(dto.getContractId());
        movimiento.setMicroloanId(dto.getMicroloanId());
        movimiento.setInstallmentDate(dto.getInstallmentDate());

        // Set monto (anidado)
        Amount monto = new Amount();
        monto.setAmount(dto.getAmount());
        movimiento.setAmount(monto);

        // Set eventCode (anidado)
        Account account = new Account();
        AccountEvent event = new AccountEvent();
        event.setCode(dto.getTipoMovimiento()); 
        account.setEvent(event);
        movimiento.setAccount(account);
        return movimiento;
	}



	@Override
	public MicrocreditContractDto executeGetMicrocredit(ReservePaymentDto paymentDto) {
		Map<String, Object> args = mapper.mapingMicrocredit (paymentDto);
		
		 try {
	        	LOGGER.info("movimiento consultado {}", args,Constants.select_microcredit);
	        	Map<String, Object> resultLog = jdbcUtils.queryForMap(Constants.select_microcredit , args);
	        	MicrocreditContractDto contractDto = mapper.mapMicrocreditContract(resultLog);
	            LOGGER.info("movimiento {} actualizado correctamente", args.get("contractId"));
	            return contractDto;
	        } catch (DBException e) {
	            LOGGER.error("Error al actualizar movimiento: {}", args.get("contractId"), e);
	            return null;
	        }

	}

	@Override
	public int updateMicroCredit(MicrocreditContractDto contractDto) {
		int res = 0;
		Map<String, Object> args =mapper.mapingMicroCredit(contractDto);
		try {
        	LOGGER.info("movimiento consultado {}", args,Constants.update_microcredit);
        	res = jdbcUtils.update(Constants.update_microcredit, args);
    		LOGGER.info("[KMIC092] Microcredit update completes");
    		
        } catch (DBException e) {
            LOGGER.error("Error al actualizar movimiento: {}", args.get("contractId"), e);
            
        }
		return res;
	}


	@Override
	public List<ContDispositionDto> executeGetDispositions(ReservePaymentDto paymentDto) {
		Map<String, Object> args= mapper.mappingDispositions(paymentDto);
		
		try {
        	LOGGER.info("movimiento consultado {}", args,Constants.list_dispositionsn);
        	List<Map<String, Object>> result = jdbcUtils.queryForList(Constants.list_dispositionsn, args);
    		List<ContDispositionDto> dispoDto = mapper.mapDispositions(result);
            LOGGER.info("movimiento {} actualizado correctamente", args.get("contractId"));
            return dispoDto;
        } catch (DBException e) {
            LOGGER.error("Error al actualizar movimiento: {}", args.get("contractId"), e);
            return null;
        }
	}
	
	@Override
	public int updateConDispotion(List<ContDispositionDto> dispositionDtos) {
	    int res = 0;

	    for (ContDispositionDto contDispositionDto : dispositionDtos) {
	        Map<String, Object> mapUpdateAmortization = mapper.mappingConDispotion(contDispositionDto);

	        try {
	            LOGGER.info("Actualizando amortización con datos: {}", mapUpdateAmortization);
	            res = jdbcUtils.update(Constants.update_cont_diposition, mapUpdateAmortization);
	            LOGGER.info("Amortización actualizada correctamente para contractId: {}", contDispositionDto.getContractId());

	            if (res == 0) {
	                LOGGER.warn("No se actualizó ninguna fila para contractId: {}", contDispositionDto.getContractId());
	                return res;
	            }
	            else {
	            	LOGGER.warn("Se actualizaron filas para contractId: {}", contDispositionDto.getContractId());
	            	return res;
	            }
	        } catch (DBException e) {
	            LOGGER.error("Error al actualizar amortización para contractId: {}", contDispositionDto.getContractId(), e);
	            return res;
	        }
	    }

	    return res;
	}

	@Override
	public List<DspnAmortDto> executeGetDspnAmort(List<ContDispositionDto> dispositionDtos, Date paymentPeriod) {
	    List<DspnAmortDto> amortDtos = new ArrayList<>();

	    for (ContDispositionDto dto : dispositionDtos) {
	        Map<String, Object> params = mapper.buildDspnAmortParams(dto, paymentPeriod);

	        try {
	            LOGGER.info("Consultando amortización con parámetros: {}", params);
	            List<Map<String, Object>> result = jdbcUtils.queryForList(Constants.list_dspn, params);

	            if (result == null || result.isEmpty()) {
	                LOGGER.warn("No se encontraron resultados para contractId: {}", dto.getContractId());
	                continue;
	            }

	            List<DspnAmortDto> mappedDtos = mapper.mapDspnAmorts(result);
	            amortDtos.addAll(mappedDtos);

	            LOGGER.info("Amortización consultada correctamente para contractId: {}", dto.getContractId());

	        } catch (DBException e) {
	            LOGGER.error("Error al consultar amortización para contractId: {}", dto.getContractId(), e);
	        }
	    }

	    return amortDtos.isEmpty() ? null : amortDtos;
	}

	@Override
	public int updateDspn(List<DspnAmortDto> amortDtos) {
	    int res = 0;

	    for (DspnAmortDto dto : amortDtos) {
	        Map<String, Object> params = mapper.buildUpdateDspnParams(dto);

	        try {
	        	LOGGER.info("Actualizando Dspn Amort con parámetros: {}", params);
	            res = jdbcUtils.update(Constants.update_dspn, params);
	            LOGGER.info("Dspn Amort actualizado correctamente para contractId: {}", dto.getContractId());

	            if (res == 0) {
	            	LOGGER.warn("No se actualizó ninguna fila para contractId: {}", dto.getContractId());
	                return res;
	            }
	            else {
	            	LOGGER.warn("Se actualizaron filas para contractId: {}", dto.getContractId());
	            	return res;
	            }
	        } catch (DBException e) {
	        	LOGGER.error("Error al actualizar Dspn Amort para contractId: {}", dto.getContractId(), e);
	            return 0;
	        }
	    }

	    return res;
	}
	
	@Override
	public List<MicroloanMovement> executeListMovements(MicroloanMovement movement) {
	    Map<String, Object> params = mapper.buildListMovementsParams(movement);

	    try {
	        LOGGER.info("Consultando movimientos con parámetros: {}", params);
	        List<Map<String, Object>> result = jdbcUtils.queryForList(Constants.list_logs_mov, params);

	        if (result == null || result.isEmpty()) {
	            LOGGER.warn("No se encontraron movimientos para acctMov: {}", movement.getAccount().getNumber());
	            return null;
	        }

	        List<MicroloanMovement> listEvents = mapper.mapListMicroloanMovement(result);
	        LOGGER.info("Movimientos consultados correctamente para acctMov: {}", movement.getAccount().getNumber());
	        return listEvents;

	    } catch (DBException e) {
	        LOGGER.error("Error al consultar movimientos para acctMov: {}", movement.getAccount().getNumber(), e);
	        return null;
	    }
	}
	
	@Override
	public AmortConditionDto executeGetAmorCond(DspnAmortDto dspnAmortDto) {
	    Map<String, Object> params = mapper.buildAmortConditionParams(dspnAmortDto);

	    try {
	        LOGGER.info("Consultando condición de amortización con parámetros: {}", params);
	        Map<String, Object> result = jdbcUtils.queryForMap(Constants.list_amort_cond, params);

	        if (result != null) {
	            AmortConditionDto conditionDto = mapper.mapAmortCondition(result);
	            LOGGER.info("Condición de amortización obtenida correctamente para contractId: {}", dspnAmortDto.getContractId());
	            return conditionDto;
	        } else {
	            LOGGER.warn("No se encontró condición de amortización para contractId: {}", dspnAmortDto.getContractId());
	            return null;
	        }

	    } catch (DBException e) {
	        LOGGER.error("Error al consultar condición de amortización para contractId: {}", dspnAmortDto.getContractId(), e);
	        return null;
	    }
	}

	@Override
	public int updateAmortCond(AmortConditionDto newAmorCon) {
	    int res = 0;
	    Map<String, Object> params = mapper.buildUpdateAmortCondParams(newAmorCon);

	    try {
	    	LOGGER.info("Actualizando condición de amortización con parámetros: {}", params);
	        res = jdbcUtils.update(Constants.update_amort_cond, params);
	        LOGGER.info("Condición de amortización actualizada correctamente para contractId: {}", newAmorCon.getContractId());
	    } catch (DBException e) {
	    	LOGGER.error("Error al actualizar condición de amortización para contractId: {}", newAmorCon.getContractId(), e);
	        return 0;
	    }

	    return res;
	}



}


