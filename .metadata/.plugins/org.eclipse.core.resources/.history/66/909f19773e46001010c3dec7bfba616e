package Utils;

import java.util.*;
import java.sql.Timestamp;

import com.bbva.kmic.dto.commonmodel.*;
import com.bbva.kmic.dto.movementmodel.MicroloanMovement;
import com.bbva.kmic.dto.payments.*;


/**
 * Clase utilitaria para el mapeo de DTOs y parámetros SQL en el contexto de microcréditos.
 */
public class MappingMeth {

    // ------------------------
    // CONTRATO
    // ------------------------

    public Map<String, Object> mapingMicrocredit(ReservePaymentDto paymentDto) {
        Map<String, Object> mapSelectMicro = new HashMap<>();
        mapSelectMicro.put("contractId", paymentDto.getContractId());
        return mapSelectMicro;
    }

    public MicrocreditContractDto mapMicrocreditContract(Map<String, Object> contract) {
        MicrocreditContractDto contractDto = new MicrocreditContractDto();
        contractDto.setContractId(contract.get("G_CONTRACT_ID").toString());
        contractDto.setContractStatus(contract.get("G_MCRCR_CONTRACT_STATUS_TYPE").toString());
        contractDto.setGrantedAmount(Double.parseDouble(contract.get("GF_GRANTED_AMOUNT").toString()));
        contractDto.setDrwdnAmount(Double.parseDouble(contract.get("GF_DRAWN_AMOUNT").toString()));
        contractDto.setAvailableAmount(Double.parseDouble(contract.get("GF_AVAILABLE_AMOUNT").toString()));
        return contractDto;
    }

    public Map<String, Object> mapingMicroCredit(MicrocreditContractDto contractDto) {
        Map<String, Object> mapUpdateMicrocredit = new HashMap<>();
        mapUpdateMicrocredit.put("drawnAmount", contractDto.getDrwdnAmount());
        mapUpdateMicrocredit.put("availableAmount", contractDto.getAvailableAmount());
        mapUpdateMicrocredit.put("contractId", contractDto.getContractId());
        mapUpdateMicrocredit.put("contractStatusType", contractDto.getContractStatus());
        return mapUpdateMicrocredit;
    }

    // ------------------------
    // DISPOSICIÓN
    // ------------------------

    public List<ContDispositionDto> mapDispositions(List<Map<String, Object>> dispo) {
        List<ContDispositionDto> contDispositions = new ArrayList<>();

        for (Map<String, Object> map : dispo) {
            ContDispositionDto dto = new ContDispositionDto();
            dto.setContractId(map.get("G_CONTRACT_ID").toString());
            dto.setOperationId(map.get("GF_OPERATION_PAGE_ID").toString());
            dto.setDrwdnAmount(Double.parseDouble(map.get("GF_DRAWDOWN_AMOUNT").toString()));
            dto.setTermNumber(map.get("GF_CR_REQUEST_TERM_NUMBER").toString());
            dto.setStatusType(map.get("G_MCRCR_DSPN_STATUS_TYPE").toString());
            dto.setDrwdnTotal(Double.parseDouble(map.get("GF_DRAWDOWN_TOTAL_AMOUNT").toString()));
            dto.setRecoveredTotal(Double.parseDouble(map.get("GF_CR_RECOVERED_TOTAL_AMOUNT").toString()));
            dto.setRepaymentAmount(Double.parseDouble(map.get("GF_REPAYMENT_OUTSTD_AMOUNT").toString()));
            contDispositions.add(dto);
        }

        return contDispositions;
    }

    public Map<String, Object> mappingDispositions(ReservePaymentDto paymentDto) {
        Map<String, Object> mapListDispo = new HashMap<>();
        mapListDispo.put("contractId", paymentDto.getContractId());
        return mapListDispo;
    }

    public Map<String, Object> mappingConDispotion(ContDispositionDto contDispositionDto) {
        Map<String, Object> mapUpdateAmortization = new HashMap<>();
        mapUpdateAmortization.put("pagado", contDispositionDto.getRecoveredTotal());
        mapUpdateAmortization.put("porPagar", contDispositionDto.getRepaymentAmount());
        mapUpdateAmortization.put("contractId", contDispositionDto.getContractId());
        mapUpdateAmortization.put("operationPageId", contDispositionDto.getOperationId());
        return mapUpdateAmortization;
    }

    public Map<String, Object> buildDspnAmortParams(ContDispositionDto dto, Date paymentPeriod) {
        Map<String, Object> map = new HashMap<>();
        map.put("contractId", dto.getContractId());
        map.put("contractDisId", dto.getOperationId());
        map.put("instDate", paymentPeriod);
        return map;
    }

    // ------------------------
    // AMORTIZACIÓN
    // ------------------------

    public List<DspnAmortDto> mapDspnAmorts(List<Map<String, Object>> amorts) {
        List<DspnAmortDto> dspnAmorts = new ArrayList<>();

        for (Map<String, Object> map : amorts) {
            DspnAmortDto dto = new DspnAmortDto();
            dto.setContractId(map.get("G_CONTRACT_ID").toString());
            dto.setOperationId(map.get("GF_OPERATION_PAGE_ID").toString());
            dto.setStatusType(map.get("G_MCRCR_AMORT_STATUS_TYPE").toString());
            dto.setSequenceId(map.get("GF_SEQUENCE_ID").toString());
            dto.setItemDate((Date) map.get("GF_ITEM_SETTLEMENT_DATE"));
            dto.setCapAmountTotal(Double.parseDouble(map.get("GF_CAP_AMORTIZ_INSTLMNT_AMOUNT").toString()));
            dto.setCapAmountPay(Double.parseDouble(map.get("GF_AMORT_CAPITAL_AMOUNT").toString()));
            dto.setCrAmountTotal(Double.parseDouble(map.get("GF_CREDIT_AMORTIZED_AMOUNT").toString()));
            dto.setCrAmountPay(Double.parseDouble(map.get("GF_DRWDN_AMORT_TRADE_AMOUNT").toString()));
            dspnAmorts.add(dto);
        }

        return dspnAmorts;
    }

    public Map<String, Object> buildUpdateDspnParams(DspnAmortDto dto) {
        Map<String, Object> map = new HashMap<>();
        map.put("drwdnAmortTradeAmount", dto.getCrAmountPay());
        map.put("amortCapitalAmount", dto.getCapAmountPay());
        map.put("mcrcrAmortStatusType", dto.getStatusType());
        map.put("contractId", dto.getContractId());
        map.put("operationPageId", dto.getOperationId());
        map.put("itemSettlementDate", dto.getItemDate());
        return map;
    }

    public Map<String, Object> buildAmortConditionParams(DspnAmortDto dto) {
        Map<String, Object> map = new HashMap<>();
        map.put("contractId", dto.getContractId());
        map.put("operationId", dto.getOperationId());
        map.put("instDate", dto.getItemDate());
        return map;
    }

    public AmortConditionDto mapAmortCondition(Map<String, Object> result) {
        AmortConditionDto dto = new AmortConditionDto();
        dto.setContractId(result.get("G_CONTRACT_ID").toString());
        dto.setOperationId(result.get("GF_OPERATION_PAGE_ID").toString());
        dto.setItmDate((Date) result.get("GF_ITEM_SETTLEMENT_DATE"));
        dto.setStatusType(result.get("G_MCRCR_AMORT_STATUS_TYPE").toString());
        dto.setEcondAmount(Double.parseDouble(result.get("GF_APPLIED_ECON_COND_AMOUNT").toString()));
        return dto;
    }

    // ------------------------
    // MOVIMIENTO
    // ------------------------

    public Map<String, Object> buildListMovementsParams(MicroloanMovement movement) {
        Map<String, Object> map = new HashMap<>();
        map.put("acctMov", movement.getAccount().getNumber());
        return map;
    }

    public List<MicroloanMovement> mapListMicroloanMovement(List<Map<String, Object>> resultSet) {
        List<MicroloanMovement> list = new ArrayList<>();
        if (resultSet != null) {
            resultSet.forEach(row -> list.add(mapMicroloanMovement(row)));
        }
        return list;
    }

    public static MicroloanMovement mapMicroloanMovement(Map<String, Object> row) {
        Timestamp ts = (Timestamp) row.get("GF_AUDIT_DATE");
        Calendar date = Calendar.getInstance();
        date.setTimeInMillis(ts.getTime());

        MicroloanMovement mm = new MicroloanMovement();
        mm.setAmount(new Amount());
        mm.setAccount(new Account());
        mm.getAccount().setEvent(new AccountEvent());
        mm.getAccount().getEvent().setRegionalCenter(new RegionalCenter());
        mm.setRelatedContract(new RelatedContract());
        mm.setAudit(new Audit());

        mm.setContractId(row.get("G_CONTRACT_ID").toString());
        mm.setDate((Date) row.get("GF_MOV_DATE"));
        mm.setNumber(Integer.parseInt(row.get("GF_SEQUENCE_ID").toString()));
        mm.setMicroloanId(row.get("GF_OPERATION_PAGE_ID").toString());
        mm.getAccount().setNumber(row.get("GF_ACCT_MOV_ID").toString());
        mm.getAccount().getEvent().setCode(row.get("G_MICROCREDIT_MOVEMENT_TYPE").toString());
        mm.getAmount().setAmount(Double.parseDouble(row.get("GF_MOVEMENT_AMOUNT").toString()));
        mm.getAmount().setCurrency(row.get("G_CURRENCY_ID").toString());
        mm.getAccount().getEvent().setStatus(row.get("G_ACTIVE_MOVEMENT_IND_TYPE").toString());
        mm.getAccount().setDate((Date) row.get("GF_GL_ACCOUNT_DATE"));
        mm.setInstallmentDate((Date) row.get("GF_INSTALLMENT_PERIOD_DATE"));
        mm.getAccount().setCoded(row.get("GF_GL_ACCOUNTING_STRING_ID").toString());
        mm.getRelatedContract().setContractType(row.get("G_LOCAL_CONTRACT_TYPE").toString());
        mm.getRelatedContract().setNumber(row.get("GF_MOV_ASSO_ACCOUNT_ID").toString());
        mm.setInterbankTrackingDescription(
            row.get("GF_TRACKING_TRANSACTION_DESC") != null ? row.get("GF_TRACKING_TRANSACTION_DESC").toString() : null);
        mm.getAccount().setPositionNumber(
            row.get("GF_ACCOUNTING_POSITION_ID") != null ? row.get("GF_ACCOUNTING_POSITION_ID").toString() : null);
        mm.getAccount().getEvent().getRegionalCenter().setDestiny(
            row.get("GF_NEW_CUST_REGIONAL_CENTRE_ID") != null ? row.get("GF_NEW_CUST_REGIONAL_CENTRE_ID").toString() : null);
        mm.setChannelCode(row.get("GF_APP_CHANNEL_ID").toString());
        mm.getAccount().getEvent().getRegionalCenter()
            .setOperative(row.get("GF_CUSTOMER_PROPOSAL_BRANCH_ID").toString());
        mm.getAccount().getEvent().getRegionalCenter()
            .setOrigin(row.get("GF_CREDIT_REQUEST_ORIGIN_RC_ID").toString());
        mm.getAudit().setUserCode(row.get("GF_USER_AUDIT_ID").toString());
        mm.getAudit().setTimestamp(date);

        return mm;
    }
}

