package Utils;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.List;
import java.util.Optional;

import com.bbva.kmic.dto.movementmodel.MicroloanMovement;
import com.bbva.kmic.dto.reservepayments.AmortConditionDto;
import com.bbva.kmic.dto.reservepayments.ContDispositionDto;
import com.bbva.kmic.dto.reservepayments.MicrocreditContractDto;

public class ReverseCalc {

    public MicrocreditContractDto calculateMicrocredit(MicrocreditContractDto contractDto, BigDecimal reverseAmountTotal) {
        BigDecimal drwdnAmount = BigDecimal.valueOf(contractDto.getDrwdnAmount()).add(reverseAmountTotal);
        BigDecimal availableAmount = BigDecimal.valueOf(contractDto.getAvailableAmount()).subtract(reverseAmountTotal);
        contractDto.setDrwdnAmount(drwdnAmount.doubleValue());
        contractDto.setAvailableAmount(availableAmount.doubleValue());
        return contractDto;
    }

    public ContDispositionDto calculateDisposition(List<ContDispositionDto> dispositionDtos, BigDecimal saveAmount, String operationId) {
        Optional<ContDispositionDto> optional = dispositionDtos.stream()
            .filter(d -> d.getOperationId().equals(operationId))
            .findFirst();

        if (optional.isPresent()) {
            ContDispositionDto dto = optional.get();
            BigDecimal recovered = BigDecimal.valueOf(dto.getRecoveredTotal()).subtract(saveAmount);
            BigDecimal repayment = BigDecimal.valueOf(dto.getRepaymentAmount()).add(saveAmount);
            dto.setRecoveredTotal(recovered.doubleValue());
            dto.setRepaymentAmount(repayment.doubleValue());

            if (repayment.compareTo(BigDecimal.ZERO) != 0) {
                dto.setStatusType("PENDING");
            }
            return dto;
        }

        return null;
    }

    public AmortConditionDto calculateAmortizationCondition(AmortConditionDto amorCond, BigDecimal comision, BigDecimal iva) {
        BigDecimal fee = BigDecimal.valueOf(amorCond.getFeeAmount()).subtract(comision);
        BigDecimal tax = BigDecimal.valueOf(amorCond.getRecTaxAmount()).subtract(iva);
        amorCond.setFeeAmount(fee.doubleValue());
        amorCond.setRecTaxAmount(tax.doubleValue());
        amorCond.setStatusType("PENDING");
        return amorCond;
    }

    public Double extractAmountByType(int id, List<MicroloanMovement> listEvents) {
        String code = switch (id) {
            case 1 -> "PAGMENCA";   // Capital
            case 2 -> "PGMNCMDI";   // ComisiÃ³n
            case 3 -> "PGMNIVAC";   // IVA
            default -> null;
        };

        if (code == null) return 0.0;

        return listEvents.stream()
            .filter(m -> m.getAccount().getEvent().getCode().equals(code))
            .map(m -> m.getAmount().getAmount())
            .findFirst()
            .orElse(0.0);
    }

    public BigDecimal calculateCapitalPay(BigDecimal saveAmount, BigDecimal interes, BigDecimal capAmountPay) {
        BigDecimal capitalPay = saveAmount.subtract(interes).setScale(2, RoundingMode.HALF_UP);
        if (capAmountPay.compareTo(BigDecimal.ZERO) >= 0) {
            if (capitalPay.compareTo(capAmountPay) <= 0) {
                return capAmountPay.subtract(capitalPay);
            } else {
                return BigDecimal.ZERO;
            }
        }
        return capAmountPay;
    }
}
