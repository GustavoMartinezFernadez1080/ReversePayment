package Utils;

import java.util.*;
import java.sql.Timestamp;

import com.bbva.kmic.dto.payments.*;
import com.bbva.kmic.dto.commonmodel.*;
import com.bbva.kmic.dto.movementmodel.*;

public class MappingMeth {

    public Map<String, Object> mapingMicrocredit(ReservePaymentDto paymentDto) {
        Map<String, Object> map = new HashMap<>();
        map.put("contractId", paymentDto.getContractId());
        return map;
    }

    public MicrocreditContractDto mapMicrocreditContract(Map<String, Object> contract) {
        MicrocreditContractDto dto = new MicrocreditContractDto();
        dto.setContractId(toStr(contract.get("G_CONTRACT_ID")));
        dto.setContractStatus(toStr(contract.get("G_MCRCR_CONTRACT_STATUS_TYPE")));
        dto.setGrantedAmount(toDouble(contract.get("GF_GRANTED_AMOUNT")));
        dto.setDrwdnAmount(toDouble(contract.get("GF_DRAWN_AMOUNT")));
        dto.setAvailableAmount(toDouble(contract.get("GF_AVAILABLE_AMOUNT")));
        return dto;
    }

    public Map<String, Object> mapingMicroCredit(MicrocreditContractDto dto) {
        Map<String, Object> map = new HashMap<>();
        map.put("drawnAmount", dto.getDrwdnAmount());
        map.put("availableAmount", dto.getAvailableAmount());
        map.put("contractId", dto.getContractId());
        map.put("contractStatusType", dto.getContractStatus());
        return map;
    }

    public List<ContDispositionDto> mapDispositions(List<Map<String, Object>> list) {
        List<ContDispositionDto> result = new ArrayList<>();
        for (Map<String, Object> map : list) {
            ContDispositionDto dto = new ContDispositionDto();
            dto.setContractId(toStr(map.get("G_CONTRACT_ID")));
            dto.setOperationId(toStr(map.get("GF_OPERATION_PAGE_ID")));
            dto.setDrwdnAmount(toDouble(map.get("GF_DRAWDOWN_AMOUNT")));
            dto.setTermNumber(toStr(map.get("GF_CR_REQUEST_TERM_NUMBER")));
            dto.setStatusType(toStr(map.get("G_MCRCR_DSPN_STATUS_TYPE")));
            dto.setDrwdnTotal(toDouble(map.get("GF_DRAWDOWN_TOTAL_AMOUNT")));
            dto.setRecoveredTotal(toDouble(map.get("GF_CR_RECOVERED_TOTAL_AMOUNT")));
            dto.setRepaymentAmount(toDouble(map.get("GF_REPAYMENT_OUTSTD_AMOUNT")));
            result.add(dto);
        }
        return result;
    }

    public Map<String, Object> mappingDispositions(ReservePaymentDto dto) {
        Map<String, Object> map = new HashMap<>();
        map.put("contractId", dto.getContractId());
        return map;
    }

    public Map<String, Object> mappingConDispotion(ContDispositionDto dto) {
        Map<String, Object> map = new HashMap<>();
        map.put("pagado", dto.getRecoveredTotal());
        map.put("porPagar", dto.getRepaymentAmount());
        map.put("contractId", dto.getContractId());
        map.put("operationPageId", dto.getOperationId());
        return map;
    }

    public Map<String, Object> buildDspnAmortParams(ContDispositionDto dto, Date period) {
        Map<String, Object> map = new HashMap<>();
        map.put("contractId", dto.getContractId());
        map.put("contractDisId", dto.getOperationId());
        map.put("instDate", period);
        return map;
    }

    public List<DspnAmortDto> mapDspnAmorts(List<Map<String, Object>> list) {
        List<DspnAmortDto> result = new ArrayList<>();
        for (Map<String, Object> map : list) {
            DspnAmortDto dto = new DspnAmortDto();
            dto.setContractId(toStr(map.get("G_CONTRACT_ID")));
            dto.setOperationId(toStr(map.get("GF_OPERATION_PAGE_ID")));
            dto.setStatusType(toStr(map.get("G_MCRCR_AMORT_STATUS_TYPE")));
            dto.setSequenceId(toStr(map.get("GF_SEQUENCE_ID")));
            dto.setItemDate((Date) map.get("GF_ITEM_SETTLEMENT_DATE"));
            dto.setCapAmountTotal(toDouble(map.get("GF_CAP_AMORTIZ_INSTLMNT_AMOUNT")));
            dto.setCapAmountPay(toDouble(map.get("GF_AMORT_CAPITAL_AMOUNT")));
            dto.setCrAmountTotal(toDouble(map.get("GF_CREDIT_AMORTIZED_AMOUNT")));
            dto.setCrAmountPay(toDouble(map.get("GF_DRWDN_AMORT_TRADE_AMOUNT")));
            result.add(dto);
        }
        return result;
    }

    public Map<String, Object> buildUpdateDspnParams(DspnAmortDto dto) {
        Map<String, Object> map = new HashMap<>();
        map.put("drwdnAmortTradeAmount", dto.getCrAmountPay());
        map.put("amortCapitalAmount", dto.getCapAmountPay());
        map.put("mcrcrAmortStatusType", dto.getStatusType());
        map.put("contractId", dto.getContractId());
        map.put("operationPageId", dto.getOperationId());
        map.put("itemSettlementDate", dto.getItemDate());
        return map;
    }

    public Map<String, Object> buildListMovementsParams(MicroloanMovement m) {
        Map<String, Object> map = new HashMap<>();
        map.put("acctMov", m.getAccount().getNumber());
        return map;
    }

    public List<MicroloanMovement> mapListMicroloanMovement(List<Map<String, Object>> rows) {
        List<MicroloanMovement> list = new ArrayList<>();
        if (rows != null) {
            for (Map<String, Object> row : rows) {
                list.add(mapMicroloanMovement(row));
            }
        }
        return list;
    }

    public static MicroloanMovement mapMicroloanMovement(Map<String, Object> row) {
        Timestamp ts = (Timestamp) row.get("GF_AUDIT_DATE");
        Calendar date = Calendar.getInstance();
        date.setTimeInMillis(ts.getTime());

        MicroloanMovement mm = new MicroloanMovement();
        mm.setAmount(new Amount());
        mm.setAccount(new Account());
        mm.getAccount().setEvent(new AccountEvent());
        mm.getAccount().getEvent().setRegionalCenter(new RegionalCenter());
        mm.setRelatedContract(new RelatedContract());
        mm.setAudit(new Audit());

        mm.setContractId(toStr(row.get("G_CONTRACT_ID")));
        mm.setDate((Date) row.get("GF_MOV_DATE"));
        mm.setNumber(toInt(row.get("GF_SEQUENCE_ID")));
        mm.setMicroloanId(toStr(row.get("GF_OPERATION_PAGE_ID")));
        mm.getAccount().setNumber(toStr(row.get("GF_ACCT_MOV_ID")));
        mm.getAccount().getEvent().setCode(toStr(row.get("G_MICROCREDIT_MOVEMENT_TYPE")));
        mm.getAmount().setAmount(toDouble(row.get("GF_MOVEMENT_AMOUNT")));
        mm.getAmount().setCurrency(toStr(row.get("G_CURRENCY_ID")));
        mm.getAccount().getEvent().setStatus(toStr(row.get("G_ACTIVE_MOVEMENT_IND_TYPE")));
        mm.getAccount().setDate((Date) row.get("GF_GL_ACCOUNT_DATE"));
        mm.setInstallmentDate((Date) row.get("GF_INSTALLMENT_PERIOD_DATE"));
        mm.getAccount().setCoded(toStr(row.get("GF_GL_ACCOUNTING_STRING_ID")));
        mm.getRelatedContract().setContractType(toStr(row.get("G_LOCAL_CONTRACT_TYPE")));
        mm.getRelatedContract().setNumber(toStr(row.get("GF_MOV_ASSO_ACCOUNT_ID")));
        mm.setInterbankTrackingDescription(toNullableStr(row.get("GF_TRACKING_TRANSACTION_DESC")));
        mm.getAccount().setPositionNumber(toNullableStr(row.get("GF_ACCOUNTING_POSITION_ID")));
        mm.getAccount().getEvent().getRegionalCenter().setDestiny(toNullableStr(row.get("GF_NEW_CUST_REGIONAL_CENTRE_ID")));
        mm.setChannelCode(toStr(row.get("GF_APP_CHANNEL_ID")));
        mm.getAccount().getEvent().getRegionalCenter().setOperative(toStr(row.get("GF_CUSTOMER_PROPOSAL_BRANCH_ID")));
        mm.getAccount().getEvent().getRegionalCenter().setOrigin(toStr(row.get("GF_CREDIT_REQUEST_ORIGIN_RC_ID")));
        mm.getAudit().setUserCode(toStr(row.get("GF_USER_AUDIT_ID")));
        mm.getAudit().setTimestamp(date);

        return mm;
    }

    public Map<String, Object> buildAmortConditionParams(DspnAmortDto dto) {
        Map<String, Object> map = new HashMap<>();
        map.put("contractId", dto.getContractId());
        map.put("operationId", dto.getOperationId());
        map.put("instDate", dto.getItemDate());
        return map;
    }

    public AmortConditionDto mapAmortCondition(Map<String, Object> result) {
        AmortConditionDto dto = new AmortConditionDto();
        dto.setContractId(toStr(result.get("G_CONTRACT_ID")));
        dto.setOperationId(toStr(result.get("GF_OPERATION_PAGE_ID")));
        dto.setItmDate((Date) result.get("GF_ITEM_SETTLEMENT_DATE"));
        dto.setStatusType(toStr(result.get("G_MCRCR_AMORT_STATUS_TYPE")));
        return dto;
    }

    // --- Helper Methods ---
    private static String toStr(Object value) {
        return value != null ? value.toString() : "";
    }

    private static String toNullableStr(Object value) {
        return value != null ? value.toString() : null;
    }

    private static Double toDouble(Object value) {
        return value != null ? Double.parseDouble(value.toString()) : 0.0;
    }

    private static int toInt(Object value) {
        return value != null ? Integer.parseInt(value.toString()) : 0;
    }
}

