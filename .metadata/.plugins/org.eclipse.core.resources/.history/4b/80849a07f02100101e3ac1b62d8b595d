package com.bbva.kmic.lib.r092.impl;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.sql.Date;
import com.bbva.kmic.dto.payments.ProductInputDTO;
import com.bbva.apx.exception.db.DBException;
import com.bbva.kmic.dto.commonmodel.Account;
import com.bbva.kmic.dto.commonmodel.Amount;
import com.bbva.kmic.dto.commonmodel.AccountEvent;
import com.bbva.kmic.dto.movementmodel.MicroloanMovement;

/**
 * The KMICR092Impl class...
 */
public class KMICR092Impl extends KMICR092Abstract {

	private static final Logger LOGGER = LoggerFactory.getLogger(KMICR092Impl.class);
    
	/**
	 * The execute method...
	 */
	@Override
	public void executeGetReversePayments(List<ProductInputDTO> items) {
	    for (ProductInputDTO dto : items) {
	        LOGGER.info("[KMICR92] Línea leída y mapeada en librería: {}", dto.toString());
 
	        MicroloanMovement map = maping ( dto );
	        // Llama ahora que ya está poblado
	        //MicroloanMovement out = kmicR060.executeGetMicroloanMovement(map);

	        // Puedes loggear la salida si quieres validar
	        if (kmicR060 == null) {
	            LOGGER.error("KMICR060 no fue inyectado correctamente");
	            Map<String, Object> args = buildUserParams(map);
	            executeUpdateMicrocreditContract (args) ;
	            executeUpdateDspnAmort(args);
	            executeUpdateAmortizationContition(args);
	        } else {
	            LOGGER.info("KMICR060 fue inyectado correctamente");
	            Map<String, Object> args = buildUserParams(map);
	            executeUpdateMicrocreditContract (args) ;
	            executeUpdateDspnAmort(args);
	            executeUpdateAmortizationContition(args);
	            
	        }

	    }
	}



	
	@Override
	public int executeUpdateMicrocreditContract (Map<String, Object> args) {
		 LOGGER.info("Iniciando actualización de movimiento: {}", args.get("contractId"));
	        
	        int result=0;

	        try {
	        	LOGGER.info("movimiento {} previo a la consulta {}", args,"update.microcredit.contract");
	        	result = jdbcUtils.update(Constants.getMicrocreditContractUpdate(), args);
	            LOGGER.info("movimiento {} actualizado correctamente", args.get("contractId"));
	            return result;
	        } catch (DBException e) {
	            LOGGER.error("Error al actualizar movimiento: {}", args.get("contractId"), e);
	            return result;
	        }
	}
	
	
	private static Map<String, Object> buildUserParams(MicroloanMovement bean){
	     Map<String, Object> map = new HashMap<>();
	    LOGGER.debug("Inicio de mapeo: {}");
	    map.put("contractId", bean.getContractId());
	    
	    LOGGER.debug("contractId: {}", bean.getContractId());
	    map.put("microloanId", bean.getMicroloanId());
	    map.put("date", new Date(bean.getInstallmentDate().getTime()));
	    if (bean.getAmount() != null) {
	        map.put("amount", bean.getAmount().getAmount());
	    }
	    if (bean.getAccount() != null && bean.getAccount().getEvent() != null) {
	        map.put("eventCode", bean.getAccount().getEvent().getCode());
	    }
	    LOGGER.debug("Parámetros construidos: {}", map);
	    return map;
	}

	private MicroloanMovement maping (ProductInputDTO dto ) {
		MicroloanMovement movimiento = new MicroloanMovement();
		// Set campos directos
        movimiento.setContractId(dto.getContractId());
        movimiento.setMicroloanId(dto.getMicroloanId());
        movimiento.setInstallmentDate(dto.getInstallmentDate());

        // Set monto (anidado)
        Amount monto = new Amount();
        monto.setAmount(dto.getAmount());
        movimiento.setAmount(monto);

        // Set eventCode (anidado)
        Account account = new Account();
        AccountEvent event = new AccountEvent();
        event.setCode(dto.getTipoMovimiento()); 
        account.setEvent(event);
        movimiento.setAccount(account);
        return movimiento;
	}

	@Override
	public int executeUpdateAmortizationContition(Map<String, Object> args) {
		 LOGGER.info("Iniciando actualización de movimiento: {}", args.get("contractId"));
	        
	        int result=0;

	        try {
	        	LOGGER.info("movimiento {} previo a la consulta {}", args,"update.microcredit.contract");
	        	result = jdbcUtils.update(Constants.getAmortizationConditionUpdate(), args);
	            LOGGER.info("movimiento {} actualizado correctamente", args.get("contractId"));
	            return result;
	        } catch (DBException e) {
	            LOGGER.error("Error al actualizar movimiento: {}", args.get("contractId"), e);
	            return result;
	        }
	}


	@Override
	public int executeUpdateDspnAmort(Map<String, Object> args) {
		 LOGGER.info("Iniciando actualización de movimiento: {}", args.get("contractId"));
	        
	        int result=0;

	        try {
	        	LOGGER.info("movimiento {} previo a la consulta {}", args,"update.microcredit.contract");
	        	result = jdbcUtils.update(Constants.getMcecrAmortizationUpdate(), args);
	            LOGGER.info("movimiento {} actualizado correctamente", args.get("contractId"));
	            return result;
	        } catch (DBException e) {
	            LOGGER.error("Error al actualizar movimiento: {}", args.get("contractId"), e);
	            return result;
	        }
	}

}
