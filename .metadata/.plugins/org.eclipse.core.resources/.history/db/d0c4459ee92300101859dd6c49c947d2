// Estructura base de pruebas unitarias para el Job KMICJ044-01-ZZ
// Archivo: src/test/java/com/bbva/kmic/batch/KMICJ04401ZZFunctionalTest.java

package com.bbva.kmic.batch;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParameter;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.test.JobLauncherTestUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations={
    "classpath:/META-INF/spring/batch/beans/KMICJ044-01-ZZ-beans.xml",
    "classpath:/META-INF/spring/batch/jobs/jobs-KMICJ044-01-ZZ-context.xml"
})
public class KMICJ04401ZZFunctionalTest {

    @Autowired
    private JobLauncherTestUtils jobLauncherTestUtils;

    @Test
    public void testLaunchJob() throws Exception {
        Path ruta = Paths.get("src/test/resources/input/mock_input.txt").toAbsolutePath();
        JobParameter jobParameter = new JobParameter(ruta.toString());

        HashMap<String, JobParameter> parameters = new HashMap<>();
        parameters.put("InputFile", jobParameter);
        JobParameters jobParameters = new JobParameters(parameters);

        JobExecution jobExecution = jobLauncherTestUtils.launchJob(jobParameters);
        assertEquals("COMPLETED", jobExecution.getExitStatus().getExitCode());
    }
}

