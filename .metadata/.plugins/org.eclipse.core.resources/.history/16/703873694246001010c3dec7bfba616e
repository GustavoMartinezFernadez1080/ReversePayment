package com.bbva.kmic.lib.r092.impl;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.sql.Date;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;
import Utils.*;

import com.bbva.kmic.dto.commonmodel.Account;
import com.bbva.kmic.dto.commonmodel.Amount;
import com.bbva.kmic.dto.commonmodel.AccountEvent;
import com.bbva.kmic.dto.movementmodel.MicroloanMovement;
import com.bbva.kmic.dto.movementmodel.MicroloanMovementFilter;
import com.bbva.kmic.dto.payments.*;

import Utils.MappingMeth;


/**
 * The KMICR092Impl class...
 */
public class KMICR092Impl extends KMICR092Abstract {

	private static final Logger LOGGER = LoggerFactory.getLogger(KMICR092Impl.class);
	private final MappingMeth mapper = new MappingMeth();

	

	/**
	 * The execute method...
	 */
	@Override
	public MicroloanMovement executeCheckPayment(ReservePaymentDto paymentDto) {
		

		final MicroloanMovementFilter movement = mapper.mapMicroloanMovementFilter(paymentDto);

		LOGGER.info("[KMICR092] Inicia proceso de busqueda en KMICR060 de ContractID: " + paymentDto.getContractId());

		List<MicroloanMovement> result = kmicR060.executeListMicroloansMovements(movement);
		List<MicroloanMovement> paymentList = new ArrayList<MicroloanMovement>();

		if (result != null && !result.isEmpty()) {

			for (MicroloanMovement microloanMovement : result) {

				LOGGER.info("[KMICR092] REsultList: " + microloanMovement);
				if (microloanMovement.getContractId() == paymentDto.getContractId()
						|| microloanMovement.getContractId().equals(paymentDto.getContractId())) {
					if (microloanMovement.getMicroloanId() == paymentDto.getContractDisId()
							|| microloanMovement.getMicroloanId().equals(paymentDto.getContractDisId())) {
						if (microloanMovement.getAmount().getAmount() == paymentDto.getAmount()) {
							if (paymentList.isEmpty()) {
								LOGGER.info("[KMICR092] Prueba encontrar Amount: " + microloanMovement.toString());
								paymentList.add(microloanMovement);
							} else {
								LOGGER.info("[KMICR092] Existe una duplicidad de pago en log payment, termina job");
								break;
							}
						} else {
							LOGGER.info("[KMICR092] Doesn´t exist payments of " + microloanMovement.getAmount().getAmount()
									+ " in the period" + paymentDto.getPeriod().toString());
						}
					} else {
						LOGGER.info("[KMICR092] Doesn´t exist payments of " + paymentDto.getContractDisId()
								+ " in the period" + paymentDto.getPeriod().toString());
					}
				} else {
					LOGGER.info("[KMICR092] Doesn´t exist payments of " + paymentDto.getContractId() + " in the period"
							+ paymentDto.getPeriod().toString());
				}
			}
			if (paymentList != null)
				return paymentList.get(0);
		} else {
			LOGGER.info("[KMICR092] Doesn´t exist payments in the period: " + paymentDto.getPeriod().toString());
		}
		return null;

	}



	

	
	


	private boolean validateSamePayment(MicroloanMovement movement, Map<String, Object> lastMovement) {

		if (!movement.getContractId().equals(lastMovement.get("G_CONTRACT_ID"))
				&& movement.getContractId() != lastMovement.get("G_CONTRACT_ID"))
			return false;
		if (!movement.getMicroloanId().equals(lastMovement.get("GF_OPERATION_PAGE_ID"))
				&& movement.getMicroloanId() != lastMovement.get("GF_OPERATION_PAGE_ID"))
			return false;
		if (!movement.getDate().equals((Date) lastMovement.get("GF_MOV_DATE"))
				&& movement.getDate() != (Date) lastMovement.get("GF_MOV_DATE"))
			return false;

		return true;
	}




}


